<?php

namespace App\Http\Controllers;

use App\Models\Vulnerability;
use Illuminate\Http\Request;
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use App\Models\Tag;

class VulnerabilityController extends Controller
{
    /**
     * Display a listing of the resource.
     */
public function index(Request $request)
{
    $filterStatus = $request->query('status');
    $filterSeverity = $request->query('severity');
    $searchTerm = $request->query('search');
    $sortBy = $request->query('sort_by', 'created_at');
    $sortDir = $request->query('sort_dir', 'desc');
    $sortableColumns = ['id', 'title', 'severity', 'status', 'created_at'];
    if (!in_array($sortBy, $sortableColumns)) {
        $sortBy = 'created_at';
    }
    if (!in_array(strtolower($sortDir), ['asc', 'desc'])) {
        $sortDir = 'desc';
    }

    $query = Vulnerability::with(['user', 'assignee']);

    if ($filterStatus && $filterStatus !== 'Tümü') {
        $query->where('status', $filterStatus);
    }
    if ($filterSeverity && $filterSeverity !== 'Tümü') {
        $query->where('severity', $filterSeverity);
    }
    if ($searchTerm) {
        $query->where(function ($q) use ($searchTerm) {
            $q->where('title', 'LIKE', "%{$searchTerm}%")
              ->orWhere('description', 'LIKE', "%{$searchTerm}%");
        });
    }

    $query->orderBy($sortBy, $sortDir);
    $vulnerabilities = $query->paginate(10);
    $vulnerabilities->appends($request->query());

    return view('vulnerabilities.index', [
        'vulnerabilities' => $vulnerabilities,
        'currentStatus' => $filterStatus ?? 'Tümü',
        'currentSeverity' => $filterSeverity ?? 'Tümü',
        'currentSearch' => $searchTerm ?? '',
        'sortBy' => $sortBy,
        'sortDir' => $sortDir,
    ]);
}

    /**
     * Show the form for creating a new resource.
     */
 public function create()
    {
        $users = User::orderBy('name')->get();
        $tags = Tag::all();
        return view('vulnerabilities.create', compact('users', 'tags'));
    }

    /**
     * Store a newly created resource in storage.
     */
 public function store(Request $request)
    {
        $validatedData = $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'required|string',
            'severity' => 'required|string|in:Düşük,Orta,Yüksek',
            'assignee_id' => 'nullable|integer|exists:users,id',
            'tags' => 'nullable|array',
            'tags.*' => 'integer|exists:tags,id',
        ]);

        $vulnerability = Vulnerability::create([
            'title' => $validatedData['title'],
            'description' => $validatedData['description'],
            'severity' => $validatedData['severity'],
            'status' => 'Açık',
            'user_id' => Auth::id(),
            'assignee_id' => $validatedData['assignee_id'] ?? null,
        ]);

        if (isset($validatedData['tags'])) {
            $vulnerability->tags()->sync($validatedData['tags']);
        }

        return redirect()->route('vulnerabilities.index')
                         ->with('success', 'Zafiyet başarıyla eklendi!');
    }

    /**
     * Display the specified resource.
     */
 public function show(Vulnerability $vulnerability)
    {
        // İlişkili tüm verileri verimli bir şekilde yükle
        $vulnerability->loadMissing(['user', 'assignee', 'tags', 'comments.user']);

        return view('vulnerabilities.show', compact('vulnerability'));
    }

    /**
     * Show the form for editing the specified resource.
     */
        public function edit(Vulnerability $vulnerability)
    {

        $users = User::orderBy('name')->get();
        $tags = Tag::all(); // YENİ: Tüm etiketleri al
        return view('vulnerabilities.edit', compact('vulnerability', 'users', 'tags')); // YENİ: 'tags' değişkenini view'a gönder
    }

    /**
     * Update the specified resource in storage.
     */
        public function update(Request $request, Vulnerability $vulnerability)
    {
        if ($request->has('quick_status_update')) {

            $request->validate([
                'status' => 'required|string|in:Kapatıldı',
            ]);

            $vulnerability->status = 'Kapatıldı';
            $vulnerability->save();

            $successMessage = 'Zafiyet durumu başarıyla "Kapatıldı" olarak güncellendi!';

        } else {
            $validatedData = $request->validate([
                'title'       => 'required|string|max:255',
                'description' => 'required|string',
                'severity'    => 'required|string|in:Düşük,Orta,Yüksek',
                'status'      => 'required|string|in:Açık,Kapatıldı',
                'assignee_id' => 'nullable|integer|exists:users,id',
                'tags'        => 'nullable|array',
                'tags.*'      => 'integer|exists:tags,id',
            ]);

            $vulnerability->update($validatedData);
            $vulnerability->tags()->sync($validatedData['tags'] ?? []);

            $successMessage = 'Zafiyet başarıyla güncellendi!';
        }

        return redirect()->route('vulnerabilities.show', $vulnerability)
                         ->with('success', $successMessage);
    }
    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Vulnerability $vulnerability)
    {
        //
    }
}
